<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Detective_LFY&#39;s Blog</title>
  <icon>http://example.com/icon.png</icon>
  <subtitle>学习使人进步</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-28T09:32:05.242Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LianFeiyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NSSCTF中收录的【2021 鹤城杯】babyof题解</title>
    <link href="http://example.com/2021/10/28/NSSCTF%E4%B8%AD%E6%94%B6%E5%BD%95%E7%9A%84%E3%80%902021-%E9%B9%A4%E5%9F%8E%E6%9D%AF%E3%80%91babyof%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/10/28/NSSCTF%E4%B8%AD%E6%94%B6%E5%BD%95%E7%9A%84%E3%80%902021-%E9%B9%A4%E5%9F%8E%E6%9D%AF%E3%80%91babyof%E9%A2%98%E8%A7%A3/</id>
    <published>2021-10-28T08:21:38.000Z</published>
    <updated>2021-10-28T09:32:05.242Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;这题是一个比较典型的栈溢出类题，整体思路不难，我查了一下好像是当时比赛的第二题。&lt;br&gt;这题在NSSCTF上做的时候有一个点比较坑（后面讲），我不清楚是当时比赛环境就是这样还是收入时环境没有完全一致。不过还是解决了就是。&lt;br&gt;写这题的wp的原因有几个：&lt;br&gt;&lt;em&gt;一是我认为这题解法比较经典，能起到一个复习的作用；&lt;/em&gt;&lt;br&gt;&lt;em&gt;二是这题会涉及一些我之前博客中忘了写的东西，相当于做一个补充；&lt;/em&gt;&lt;br&gt;&lt;em&gt;三是解决那个小问题时用到了LibcSearcher，我个人觉得这是个不错且简单好用的Python库，一并说了。&lt;/em&gt;&lt;br&gt;这道题的exp优化参考了一些wp，但主体逻辑还是我自己写的。&lt;/p&gt;
&lt;h4 id=&quot;1-题解过程&quot;&gt;&lt;a href=&quot;#1-题解过程&quot; class=&quot;headerlink&quot; title=&quot;1.题解过程&quot;&gt;&lt;/a&gt;1.题解过程&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
    <category term="libc" scheme="http://example.com/tags/libc/"/>
    
  </entry>
  
  <entry>
    <title>栈溢出类题的一般方法</title>
    <link href="http://example.com/2021/10/26/%E6%A0%88%E6%BA%A2%E5%87%BA%E7%B1%BB%E9%A2%98%E7%9A%84%E4%B8%80%E8%88%AC%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/10/26/%E6%A0%88%E6%BA%A2%E5%87%BA%E7%B1%BB%E9%A2%98%E7%9A%84%E4%B8%80%E8%88%AC%E6%96%B9%E6%B3%95/</id>
    <published>2021-10-26T15:38:38.000Z</published>
    <updated>2021-10-26T17:07:53.178Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;本文讨论的是栈溢出类题目的思路及一般解法，不包含完整解题过程与高级ROP等。&lt;br&gt;这也算是这一个月来学习的一个总结与复习。&lt;br&gt;栈类题目的思想在我看来其实归根到底就是&lt;strong&gt;劫持控制流&lt;/strong&gt;。只要能把控制流劫持到我们想要的地方，目的便达成了。&lt;/p&gt;
&lt;h4 id=&quot;1-栈溢出的原理&quot;&gt;&lt;a href=&quot;#1-栈溢出的原理&quot; class=&quot;headerlink&quot; title=&quot;1.栈溢出的原理&quot;&gt;&lt;/a&gt;1.栈溢出的原理&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>浅谈libc地址泄露</title>
    <link href="http://example.com/2021/10/22/%E6%B5%85%E8%B0%88libc%E5%9C%B0%E5%9D%80%E6%B3%84%E9%9C%B2/"/>
    <id>http://example.com/2021/10/22/%E6%B5%85%E8%B0%88libc%E5%9C%B0%E5%9D%80%E6%B3%84%E9%9C%B2/</id>
    <published>2021-10-22T14:37:41.000Z</published>
    <updated>2021-10-22T16:40:04.271Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;这个例题似乎是没法完成最终的getshell的，因为缓冲区离got表太近了，会出问题。&lt;/p&gt;
&lt;h4 id=&quot;1-思路&quot;&gt;&lt;a href=&quot;#1-思路&quot; class=&quot;headerlink&quot; title=&quot;1.思路&quot;&gt;&lt;/a&gt;1.思路&lt;/h4&gt;&lt;p&gt;当程序开了PIE或者ASLR保护后，函数的地址会被&lt;strong&gt;随机化&lt;/strong&gt;，这时如果要返回到某个函数的话就需要泄露地址。&lt;br&gt;以开了ASLR的为例，此时系统函数的地址是随机的，但是函数在同一libc中的&lt;strong&gt;偏移量是确定的&lt;/strong&gt;。而我们知道，一个系统函数，如puts函数，在程序中被调用过后，其地址就会存在got表中，此时可以通过泄露其地址，再通过偏移即可泄露libc的基地址。此时如果要调用system或execv函数，则再用libc基地址加上对应的偏移即可。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="基地址泄露" scheme="http://example.com/tags/%E5%9F%BA%E5%9C%B0%E5%9D%80%E6%B3%84%E9%9C%B2/"/>
    
    <category term="ROP" scheme="http://example.com/tags/ROP/"/>
    
  </entry>
  
  <entry>
    <title>关于“鲲鹏杯”CTF中pwn_1一些问题的探讨</title>
    <link href="http://example.com/2021/10/20/%E5%85%B3%E4%BA%8E%E2%80%9C%E9%B2%B2%E9%B9%8F%E6%9D%AF%E2%80%9DCTF%E4%B8%ADpwn-1%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>http://example.com/2021/10/20/%E5%85%B3%E4%BA%8E%E2%80%9C%E9%B2%B2%E9%B9%8F%E6%9D%AF%E2%80%9DCTF%E4%B8%ADpwn-1%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A2%E8%AE%A8/</id>
    <published>2021-10-20T09:11:08.000Z</published>
    <updated>2021-10-20T15:40:02.895Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;&lt;em&gt;题目：&lt;a href=&quot;pwn_1&quot;&gt;点击下载ELF文件&lt;/a&gt;&lt;/em&gt;&lt;br&gt;&lt;em&gt;保护：未开任何保护&lt;/em&gt;&lt;br&gt;&lt;em&gt;其他：32位ELF，编译环境是Uubuntu14&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;说实话，这道题对pwn新人不算特别友好，主要难点有两个：一是由于汇编码中调用了call eax导致无法直接查看其伪C代码（这个在当时比赛中确实难住了我，因为以我现在的水平直接审计汇编代码属实头疼，但赛后我找到了解决的方法——很简单，因为错误指发生在call eax，那么把这行代码&lt;strong&gt;去掉或者替换&lt;/strong&gt;就行了），解决后查看伪C代码逻辑就简单了；二是这一题虽然是栈的题目，但不涉及溢出，但只要看懂了伪C代码不难想到使用shellcode，但是根据题目我们最多只能输入&lt;strong&gt;19字节&lt;/strong&gt;，而pwntools自带的shellcode远超这个字节数。所以需要准备小于19字节的shellcode。（&lt;strong&gt;因此我认为新人包括我在内要去积累一些较短的shellcode以备不时之需。&lt;/strong&gt;）&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="题目" scheme="http://example.com/tags/%E9%A2%98%E7%9B%AE/"/>
    
    <category term="shellcode" scheme="http://example.com/tags/shellcode/"/>
    
    <category term="问题探讨" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E6%8E%A2%E8%AE%A8/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Kali" scheme="http://example.com/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>浅谈简单的栈转移</title>
    <link href="http://example.com/2021/10/11/%E6%B5%85%E8%B0%88%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88%E8%BD%AC%E7%A7%BB/"/>
    <id>http://example.com/2021/10/11/%E6%B5%85%E8%B0%88%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88%E8%BD%AC%E7%A7%BB/</id>
    <published>2021-10-10T16:18:38.000Z</published>
    <updated>2021-10-12T16:44:12.152Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言-amp-回顾&quot;&gt;&lt;a href=&quot;#0-前言-amp-回顾&quot; class=&quot;headerlink&quot; title=&quot;0.前言&amp;amp;回顾&quot;&gt;&lt;/a&gt;0.前言&amp;amp;回顾&lt;/h4&gt;&lt;p&gt;简单的栈转移，但是我不清楚为什么给的system我用不了……&lt;del&gt;（可能只是因为我菜）&lt;/del&gt;&lt;em&gt;（据学长说是因为system函数执行时有栈方面的对齐要求，我简单了解了一下似乎是有某字节倍数的要求才能正常调用，具体的我目前也不是很了解，以后补充。）&lt;/em&gt;，所以我用的还是execv。此题和之前ret2csu的有些类似，只是需要进行栈转移。&lt;/p&gt;
&lt;p&gt;我们知道，leave的实质是&lt;strong&gt;mov rsp,rbp;pop rbp&lt;/strong&gt;。而ret的实质是&lt;strong&gt;pop rip&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-栈转移的原因及方法&quot;&gt;&lt;a href=&quot;#1-栈转移的原因及方法&quot; class=&quot;headerlink&quot; title=&quot;1.栈转移的原因及方法&quot;&gt;&lt;/a&gt;1.栈转移的原因及方法&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="ROP" scheme="http://example.com/tags/ROP/"/>
    
    <category term="解题思路" scheme="http://example.com/tags/%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    
    <category term="栈转移" scheme="http://example.com/tags/%E6%A0%88%E8%BD%AC%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈ret2csu</title>
    <link href="http://example.com/2021/10/09/%E6%B5%85%E8%B0%88ret2csu/"/>
    <id>http://example.com/2021/10/09/%E6%B5%85%E8%B0%88ret2csu/</id>
    <published>2021-10-09T06:09:54.000Z</published>
    <updated>2021-10-09T07:18:26.252Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;有一说一，这个rop有一些点困扰了我很久，下面予以说明。&lt;/p&gt;
&lt;h4 id=&quot;1-总体思路&quot;&gt;&lt;a href=&quot;#1-总体思路&quot; class=&quot;headerlink&quot; title=&quot;1.总体思路&quot;&gt;&lt;/a&gt;1.总体思路&lt;/h4&gt;&lt;p&gt;ret2csu一般是应对程序中存在明显的&lt;strong&gt;栈溢出漏洞&lt;/strong&gt;，但在程序中找不到system()函数，但可看到其存在read()、write()、和 &lt;strong&gt;__libc_csu_init()&lt;/strong&gt; 函数的情况。&lt;br&gt;利用程序中的一些gadget来实现获取shell。&lt;br&gt;rop链的构造一般为：&lt;strong&gt;pop n ret+n个寄存器的值+mov call&lt;/strong&gt;。&lt;em&gt;（这边的call要注意，待会讲）&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-例子&quot;&gt;&lt;a href=&quot;#2-例子&quot; class=&quot;headerlink&quot; title=&quot;2.例子&quot;&gt;&lt;/a&gt;2.例子&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="ROP" scheme="http://example.com/tags/ROP/"/>
    
    <category term="解题思路" scheme="http://example.com/tags/%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界中hello_pwn的解法</title>
    <link href="http://example.com/2021/10/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E4%B8%ADhello-pwn%E7%9A%84%E8%A7%A3%E6%B3%95/"/>
    <id>http://example.com/2021/10/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E4%B8%ADhello-pwn%E7%9A%84%E8%A7%A3%E6%B3%95/</id>
    <published>2021-10-03T15:15:44.000Z</published>
    <updated>2021-10-03T16:16:50.509Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-说在前面&quot;&gt;&lt;a href=&quot;#0-说在前面&quot; class=&quot;headerlink&quot; title=&quot;0.说在前面&quot;&gt;&lt;/a&gt;0.说在前面&lt;/h4&gt;&lt;p&gt;先声明一下，这题我之前是看wp解出的，但是当时不理解。现在学了一些栈溢出，再反过来看这道题时发现还是挺简单的。下面我把思路以及解法说一下。&lt;/p&gt;
&lt;h4 id=&quot;1-解法（自己理解后写的，可能和wp有些不一样）&quot;&gt;&lt;a href=&quot;#1-解法（自己理解后写的，可能和wp有些不一样）&quot; class=&quot;headerlink&quot; title=&quot;1.解法（自己理解后写的，可能和wp有些不一样）&quot;&gt;&lt;/a&gt;1.解法（自己理解后写的，可能和wp有些不一样）&lt;/h4&gt;&lt;p&gt;&lt;em&gt;由于我之前解过这道题，所以无法再获取在线环境。因此这里我在本地进行模拟。我创建了一个flag.txt的文件，内容是“You got the flag!”来模拟取得了flag。&lt;/em&gt;&lt;br&gt;下面正式开始。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="题目" scheme="http://example.com/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux延迟绑定与安全防护机制</title>
    <link href="http://example.com/2021/09/29/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/09/29/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2021-09-29T13:58:58.000Z</published>
    <updated>2021-09-29T15:59:38.637Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-elf文件格式&quot;&gt;&lt;a href=&quot;#0-elf文件格式&quot; class=&quot;headerlink&quot; title=&quot;0.elf文件格式&quot;&gt;&lt;/a&gt;0.elf文件格式&lt;/h4&gt;&lt;h5 id=&quot;0-1-概述&quot;&gt;&lt;a href=&quot;#0-1-概述&quot; class=&quot;headerlink&quot; title=&quot;0-1.概述&quot;&gt;&lt;/a&gt;0-1.概述&lt;/h5&gt;&lt;p&gt;ELF（Executable and Linkable Format）文件是Linux环境中的一种二进制可执行文件。&lt;br&gt;elf的基本信息存在于elf的头部信息中，这些信息包括指令的运行框架、程序入口等，可以通过 &lt;strong&gt;readelf -h &amp;lt;elf_name&amp;gt;&lt;/strong&gt; 来查看头部信息。&lt;br&gt;elf文件中包含许多&lt;strong&gt;节（section）&lt;/strong&gt;，各个节中存放不同的数据，这些节的信息存放在节头表中，可用  &lt;strong&gt;readelf -S &amp;lt;file&amp;gt;&lt;/strong&gt; 查看，主要包括：&lt;br&gt;&lt;img src=&quot;/2021/09/29/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E6%9C%BA%E5%88%B6/1.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;0-2-elf文件被加载到内存中的布局&quot;&gt;&lt;a href=&quot;#0-2-elf文件被加载到内存中的布局&quot; class=&quot;headerlink&quot; title=&quot;0-2.elf文件被加载到内存中的布局&quot;&gt;&lt;/a&gt;0-2.elf文件被加载到内存中的布局&lt;/h5&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>C语言指针学习 part.2</title>
    <link href="http://example.com/2021/09/27/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0-part-2/"/>
    <id>http://example.com/2021/09/27/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0-part-2/</id>
    <published>2021-09-27T11:23:16.000Z</published>
    <updated>2021-09-28T06:41:00.544Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;4-指针与一维数组&quot;&gt;&lt;a href=&quot;#4-指针与一维数组&quot; class=&quot;headerlink&quot; title=&quot;4.指针与一维数组&quot;&gt;&lt;/a&gt;4.指针与一维数组&lt;/h4&gt;&lt;p&gt;我们知道一个数组的元素在内存中是连续存放的，&lt;strong&gt;数组第一个元素的地址称为数组的首地址。&lt;/strong&gt;&lt;em&gt;在C语言中，数组名就是该数组的首地址。&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;4869&lt;/span&gt;],*p;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上面的为例，语句“ &lt;strong&gt;p=a;&lt;/strong&gt; ”和语句“ &lt;strong&gt;p=&amp;amp;a[0];&lt;/strong&gt; ”是等价的，都表示指针变量p指向数组a的首地址。数组首地址的值在C语言中是一个地址常量，无法改变。因此，语句“ a=p; ”或者语句“ a++; ”都是非法的。&lt;br&gt;如果数组的首地址是a，且指针变量p指向该数组的首地址，即“ p=a; ”，则C语言中还规定数组的第i个元素a[i]的地址是&lt;strong&gt;a+i，其等价于p+i。&lt;/strong&gt;如：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>函数的调用与约定</title>
    <link href="http://example.com/2021/09/25/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%8E%E7%BA%A6%E5%AE%9A/"/>
    <id>http://example.com/2021/09/25/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%8E%E7%BA%A6%E5%AE%9A/</id>
    <published>2021-09-25T03:42:08.000Z</published>
    <updated>2021-09-25T12:50:24.660Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-计算机内部的数据存储形式&quot;&gt;&lt;a href=&quot;#0-计算机内部的数据存储形式&quot; class=&quot;headerlink&quot; title=&quot;0.计算机内部的数据存储形式&quot;&gt;&lt;/a&gt;0.计算机内部的数据存储形式&lt;/h4&gt;&lt;p&gt;计算机内部有两种数据存储形式：&lt;strong&gt;大端序&lt;/strong&gt;、&lt;strong&gt;小端序&lt;/strong&gt;。对于大端序而言，数据高位存储在计算机地址的低位，数据低位存储在地址的高位。而小端序正好相反，即数据高位存储在计算机地址的高位，数据低位存储在地址的低位。&lt;br&gt;可以简记成&lt;strong&gt;大端序高低低高，小端序高高低低。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
    <category term="Assembly" scheme="http://example.com/tags/Assembly/"/>
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="数据存储" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    <category term="调用约定" scheme="http://example.com/tags/%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习</title>
    <link href="http://example.com/2021/09/24/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/09/24/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-09-23T16:30:16.000Z</published>
    <updated>2021-09-23T18:02:04.315Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-引入知识&quot;&gt;&lt;a href=&quot;#0-引入知识&quot; class=&quot;headerlink&quot; title=&quot;0.引入知识&quot;&gt;&lt;/a&gt;0.引入知识&lt;/h4&gt;&lt;p&gt;一些量词如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;中文名&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bit&lt;/td&gt;
&lt;td&gt;比特&lt;/td&gt;
&lt;td&gt;1位（1b）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;字节&lt;/td&gt;
&lt;td&gt;8位（1B）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word&lt;/td&gt;
&lt;td&gt;字&lt;/td&gt;
&lt;td&gt;16位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dword&lt;/td&gt;
&lt;td&gt;双字&lt;/td&gt;
&lt;td&gt;32位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;qword&lt;/td&gt;
&lt;td&gt;四字&lt;/td&gt;
&lt;td&gt;64位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;当前主流计算机的最小寻址单位是&lt;strong&gt;B（字节）&lt;/strong&gt;而非b（比特）。&lt;/p&gt;
&lt;h4 id=&quot;1-汇编语言的诞生&quot;&gt;&lt;a href=&quot;#1-汇编语言的诞生&quot; class=&quot;headerlink&quot; title=&quot;1.汇编语言的诞生&quot;&gt;&lt;/a&gt;1.汇编语言的诞生&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Assembly" scheme="http://example.com/tags/Assembly/"/>
    
    <category term="二进制" scheme="http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    <category term="溢出" scheme="http://example.com/tags/%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境下代码的书写及运行</title>
    <link href="http://example.com/2021/09/22/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B9%A6%E5%86%99%E5%8F%8A%E8%BF%90%E8%A1%8C/"/>
    <id>http://example.com/2021/09/22/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B9%A6%E5%86%99%E5%8F%8A%E8%BF%90%E8%A1%8C/</id>
    <published>2021-09-22T07:51:38.000Z</published>
    <updated>2021-09-23T02:52:14.102Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;1-测试环境&quot;&gt;&lt;a href=&quot;#1-测试环境&quot; class=&quot;headerlink&quot; title=&quot;1.测试环境&quot;&gt;&lt;/a&gt;1.测试环境&lt;/h4&gt;&lt;p&gt;声明：本次测试都是在我的笔记本（IdeaPad 15sITL 2021）上进行的，不同的设备结果可能会有所差距。&lt;del&gt;一般不会。&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VMware 16 Pro&lt;/strong&gt;&lt;em&gt;（如果Win10的电脑启动虚拟机会强制重启建议升级为最新版）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu 16.04&lt;/strong&gt;&lt;em&gt;（用的是学长给的已经搭好的虚拟机，自己装20.04时不知道为什么总说我硬件有问题……）&lt;/em&gt;&lt;h4 id=&quot;2-关于C-C-的&quot;&gt;&lt;a href=&quot;#2-关于C-C-的&quot; class=&quot;headerlink&quot; title=&quot;2.关于C/C++的&quot;&gt;&lt;/a&gt;2.关于C/C++的&lt;/h4&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
    <category term="Linux指令" scheme="http://example.com/tags/Linux%E6%8C%87%E4%BB%A4/"/>
    
    <category term="vim" scheme="http://example.com/tags/vim/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C语言指针学习</title>
    <link href="http://example.com/2021/09/21/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/09/21/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-09-21T14:37:38.000Z</published>
    <updated>2021-09-23T02:46:46.410Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;1-何为指针&quot;&gt;&lt;a href=&quot;#1-何为指针&quot; class=&quot;headerlink&quot; title=&quot;1.何为指针&quot;&gt;&lt;/a&gt;1.何为指针&lt;/h4&gt;&lt;p&gt;指针是一类特殊的变量，用以寄存其他变量的地址。&lt;br&gt;我们知道，假若定义一个变量，则这个变量会被随机分配到内存中的几个连续存储单元。每一个存储单元都有一个地址。正因为这些存储单元是一定的，且每种类型的变量长度是固定的，所以只要知道了这些连续存储单元中的第一个的地址，即知道了这个变量在内存中的位置。因此，这几个连续存储单元的首地址就作为这个变量的地址。例如：定义变量“float f;”，假如它被分配到地址为1000、1001、1002、1003的四个连续存储单元，则地址1000就是变量f的地址。而这个地址也成为变量f的指针。&lt;br&gt;因此，&lt;strong&gt;变量的地址就是变量的指针。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-指针变量的定义与赋值&quot;&gt;&lt;a href=&quot;#2-指针变量的定义与赋值&quot; class=&quot;headerlink&quot; title=&quot;2.指针变量的定义与赋值&quot;&gt;&lt;/a&gt;2.指针变量的定义与赋值&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="http://example.com/2021/09/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2021/09/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</id>
    <published>2021-09-20T07:35:26.000Z</published>
    <updated>2021-09-22T01:47:53.088Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/09/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg&quot; alt=&quot;test&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-这只是个测试文章&quot;&gt;&lt;a href=&quot;#1-这只是个测试文章&quot; class=&quot;headerlink&quot; title=&quot;1.这只是个测试文章&quot;&gt;&lt;/a&gt;1.这只是个测试文章&lt;/h4&gt;&lt;p&gt;它没有任何意义……&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;就像这段文字一样。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="杂项" scheme="http://example.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/09/20/hello-world/"/>
    <id>http://example.com/2021/09/20/hello-world/</id>
    <published>2021-09-20T06:21:13.059Z</published>
    <updated>2021-09-20T06:21:13.059Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt;</summary>
        
      
    
    
    
    
  </entry>
  
</feed>
