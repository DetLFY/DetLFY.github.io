<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Detective_LFY&#39;s Blog</title>
  <icon>http://example.com/icon.png</icon>
  <subtitle>学习使人进步</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-03T14:43:48.209Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LianFeiyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>详谈HFCTF2022 babygame</title>
    <link href="http://example.com/2022/03/31/%E8%AF%A6%E8%B0%88HFCTF2022-babygame/"/>
    <id>http://example.com/2022/03/31/%E8%AF%A6%E8%B0%88HFCTF2022-babygame/</id>
    <published>2022-03-31T09:58:07.000Z</published>
    <updated>2022-04-03T14:43:48.209Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-浅谈一下这次的虎符杯&quot;&gt;&lt;a href=&quot;#0-浅谈一下这次的虎符杯&quot; class=&quot;headerlink&quot; title=&quot;0.浅谈一下这次的虎符杯&quot;&gt;&lt;/a&gt;0.浅谈一下这次的虎符杯&lt;/h4&gt;&lt;p&gt;虎符结束了这么久就才开始写这篇博客实在有些抱歉，这题babygame说实话难度确实不大，而且我当时也绕过了伪随机数来到有格式化字符串漏洞的那个函数了。但是由于我对hijack retaddr这个方法的了解不足，导致最终没有打通，实在是可惜。在赛后看了很多大佬的wp也一直卡在这个点，这也反映出了我这块的薄弱之处。但经过了资料查阅、动态调试等一系列繁琐的过程后，我也算是吃透了这一题，故这篇博客我想详细谈一谈这题的解法。&lt;/p&gt;
&lt;h4 id=&quot;1-再谈格式化字符串漏洞利用中的内存任意写&quot;&gt;&lt;a href=&quot;#1-再谈格式化字符串漏洞利用中的内存任意写&quot; class=&quot;headerlink&quot; title=&quot;1.再谈格式化字符串漏洞利用中的内存任意写&quot;&gt;&lt;/a&gt;1.再谈格式化字符串漏洞利用中的内存任意写&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="格式化字符串漏洞" scheme="http://example.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="hijack retaddr" scheme="http://example.com/tags/hijack-retaddr/"/>
    
    <category term="伪随机数" scheme="http://example.com/tags/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
    <category term="HFCTF" scheme="http://example.com/tags/HFCTF/"/>
    
  </entry>
  
  <entry>
    <title>NISACTF2022</title>
    <link href="http://example.com/2022/03/29/NISACTF2022/"/>
    <id>http://example.com/2022/03/29/NISACTF2022/</id>
    <published>2022-03-29T13:48:01.000Z</published>
    <updated>2022-03-29T15:49:16.415Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;福师大那边举办的比赛，PWN的难度不大，很适合我这种小朋友玩，AK PWN自然不在话下。&lt;/p&gt;
&lt;h4 id=&quot;1-PWN&quot;&gt;&lt;a href=&quot;#1-PWN&quot; class=&quot;headerlink&quot; title=&quot;1.PWN&quot;&gt;&lt;/a&gt;1.PWN&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="NISACTF" scheme="http://example.com/tags/NISACTF/"/>
    
    <category term="RE" scheme="http://example.com/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>从axb_2019_heap谈unlink与offbyone的结合利用</title>
    <link href="http://example.com/2022/03/11/%E4%BB%8Eaxb-2019-heap%E8%B0%88unlink%E4%B8%8Eoffbyone%E7%9A%84%E7%BB%93%E5%90%88%E5%88%A9%E7%94%A8/"/>
    <id>http://example.com/2022/03/11/%E4%BB%8Eaxb-2019-heap%E8%B0%88unlink%E4%B8%8Eoffbyone%E7%9A%84%E7%BB%93%E5%90%88%E5%88%A9%E7%94%A8/</id>
    <published>2022-03-11T13:39:38.000Z</published>
    <updated>2022-03-13T08:38:45.115Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-unlink&quot;&gt;&lt;a href=&quot;#0-unlink&quot; class=&quot;headerlink&quot; title=&quot;0.unlink&quot;&gt;&lt;/a&gt;0.unlink&lt;/h4&gt;&lt;p&gt;在堆块进行合并时，会把要合并的堆块从当前的链表中取出，此时会涉及到一系列的双向链表的操作，这些操作称之为unlink。&lt;br&gt;有一张流传盛广的图片：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="堆指针" scheme="http://example.com/tags/%E5%A0%86%E6%8C%87%E9%92%88/"/>
    
    <category term="unlink" scheme="http://example.com/tags/unlink/"/>
    
    <category term="offbyone" scheme="http://example.com/tags/offbyone/"/>
    
  </entry>
  
  <entry>
    <title>从heapcreator谈chunk extend以及另一种泄露libc的思路</title>
    <link href="http://example.com/2022/03/07/%E4%BB%8Eheapcreator%E8%B0%88chunk-extend%E4%BB%A5%E5%8F%8A%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%B3%84%E9%9C%B2libc%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <id>http://example.com/2022/03/07/%E4%BB%8Eheapcreator%E8%B0%88chunk-extend%E4%BB%A5%E5%8F%8A%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%B3%84%E9%9C%B2libc%E7%9A%84%E6%80%9D%E8%B7%AF/</id>
    <published>2022-03-07T09:40:15.000Z</published>
    <updated>2022-03-08T09:56:43.850Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-chunk-extend&quot;&gt;&lt;a href=&quot;#0-chunk-extend&quot; class=&quot;headerlink&quot; title=&quot;0.chunk extend&quot;&gt;&lt;/a&gt;0.chunk extend&lt;/h4&gt;&lt;p&gt;chunk extend（堆拓展），这种方法其实之前有讲过，就是通过修改chunk size使原有的堆块长度扩展，从而覆盖其后的堆块，造成overlap，以达到leak或者attack的目的。&lt;br&gt;这种利用手法常见于有堆溢出漏洞尤其是offbyone的题。&lt;/p&gt;
&lt;h4 id=&quot;1-heapcreator&quot;&gt;&lt;a href=&quot;#1-heapcreator&quot; class=&quot;headerlink&quot; title=&quot;1.heapcreator&quot;&gt;&lt;/a&gt;1.heapcreator&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="overlap" scheme="http://example.com/tags/overlap/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="堆指针" scheme="http://example.com/tags/%E5%A0%86%E6%8C%87%E9%92%88/"/>
    
    <category term="offbyone" scheme="http://example.com/tags/offbyone/"/>
    
    <category term="chunk extend" scheme="http://example.com/tags/chunk-extend/"/>
    
  </entry>
  
  <entry>
    <title>初探libc2.27下的tcache attack</title>
    <link href="http://example.com/2022/02/24/%E5%88%9D%E6%8E%A2libc2-27%E4%B8%8B%E7%9A%84tcache-attack/"/>
    <id>http://example.com/2022/02/24/%E5%88%9D%E6%8E%A2libc2-27%E4%B8%8B%E7%9A%84tcache-attack/</id>
    <published>2022-02-24T09:13:04.000Z</published>
    <updated>2022-02-24T11:45:11.028Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-libc2-27版本下的tcache机制&quot;&gt;&lt;a href=&quot;#0-libc2-27版本下的tcache机制&quot; class=&quot;headerlink&quot; title=&quot;0.libc2.27版本下的tcache机制&quot;&gt;&lt;/a&gt;0.libc2.27版本下的tcache机制&lt;/h4&gt;&lt;p&gt;tcache是libc2.26版本后引入的新机制，其广泛应用于Ubuntu18.04及以后的系统。tcache的管理机制类似于fastbin，每个bins上最多可以有7个chunk。每个bins都是单链表，与fastbin同为LIFO。tcache的优先级大于fastbin。只有当tcache满了后 &lt;em&gt;（这里的满指的是对应的bins上已有7个chunk，无法再放入后续chunk）&lt;/em&gt;，chunk才会被放回其他链表，而在申请操作时，tcache也会被首先分配。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="tcache" scheme="http://example.com/tags/tcache/"/>
    
    <category term="tcache attack" scheme="http://example.com/tags/tcache-attack/"/>
    
    <category term="double free" scheme="http://example.com/tags/double-free/"/>
    
    <category term="堆进阶" scheme="http://example.com/tags/%E5%A0%86%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>fastbin &amp;&amp; unsortedbin attack的综合利用及通过修改堆指针实现got表改写</title>
    <link href="http://example.com/2022/02/24/fastbin-unsortedbin-attack%E7%9A%84%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8%E5%8F%8A%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E5%A0%86%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0got%E8%A1%A8%E6%94%B9%E5%86%99/"/>
    <id>http://example.com/2022/02/24/fastbin-unsortedbin-attack%E7%9A%84%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8%E5%8F%8A%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E5%A0%86%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0got%E8%A1%A8%E6%94%B9%E5%86%99/</id>
    <published>2022-02-24T06:24:16.000Z</published>
    <updated>2022-02-24T07:44:43.231Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-题目来源&quot;&gt;&lt;a href=&quot;#0-题目来源&quot; class=&quot;headerlink&quot; title=&quot;0.题目来源&quot;&gt;&lt;/a&gt;0.题目来源&lt;/h4&gt;&lt;p&gt;写这篇博客的原因是因为BUU上的一道题，这题由于是从正式比赛中复现的，因此靶机的环境有些问题（flag的位置不一样）。&lt;br&gt;按照预期解，这题应该只是单纯普通简单的unsortedbin attack实现任意内存写改写大数，从而绕到后门函数。但是这题由于给的后门函数是执行 cat /home/pwn/flag 指令的，但是可以证实靶机的flag是位于根目录的，因此后门函数便无效了。&lt;/p&gt;
&lt;h4 id=&quot;1-情景分析&quot;&gt;&lt;a href=&quot;#1-情景分析&quot; class=&quot;headerlink&quot; title=&quot;1.情景分析&quot;&gt;&lt;/a&gt;1.情景分析&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="fastbin attack" scheme="http://example.com/tags/fastbin-attack/"/>
    
    <category term="unsortedbin attack" scheme="http://example.com/tags/unsortedbin-attack/"/>
    
    <category term="堆指针" scheme="http://example.com/tags/%E5%A0%86%E6%8C%87%E9%92%88/"/>
    
    <category term="got表" scheme="http://example.com/tags/got%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>例析offbynull</title>
    <link href="http://example.com/2022/02/23/%E4%BE%8B%E6%9E%90offbynull/"/>
    <id>http://example.com/2022/02/23/%E4%BE%8B%E6%9E%90offbynull/</id>
    <published>2022-02-23T09:57:22.000Z</published>
    <updated>2022-02-23T11:55:17.658Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-特殊的offbyone&quot;&gt;&lt;a href=&quot;#0-特殊的offbyone&quot; class=&quot;headerlink&quot; title=&quot;0.特殊的offbyone&quot;&gt;&lt;/a&gt;0.特殊的offbyone&lt;/h4&gt;&lt;p&gt;offbynull是offbyone的一种特殊情况。它的特点是&lt;strong&gt;溢出的一字节为NULL字节。&lt;/strong&gt;&lt;br&gt;与传统的offbyone思路相似，我们也是要通过这溢出的NULL字节来实现chunk overlap，从而实现内存泄漏或是修改堆指针。&lt;/p&gt;
&lt;h4 id=&quot;1-利用思路&quot;&gt;&lt;a href=&quot;#1-利用思路&quot; class=&quot;headerlink&quot; title=&quot;1.利用思路&quot;&gt;&lt;/a&gt;1.利用思路&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="overlap" scheme="http://example.com/tags/overlap/"/>
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="offbyone" scheme="http://example.com/tags/offbyone/"/>
    
    <category term="offbynull" scheme="http://example.com/tags/offbynull/"/>
    
  </entry>
  
  <entry>
    <title>例析传统的offbyone</title>
    <link href="http://example.com/2022/02/22/%E4%BE%8B%E6%9E%90%E4%BC%A0%E7%BB%9F%E7%9A%84offbyone/"/>
    <id>http://example.com/2022/02/22/%E4%BE%8B%E6%9E%90%E4%BC%A0%E7%BB%9F%E7%9A%84offbyone/</id>
    <published>2022-02-22T06:53:06.000Z</published>
    <updated>2022-02-22T08:29:37.663Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-防止我忘记&quot;&gt;&lt;a href=&quot;#0-防止我忘记&quot; class=&quot;headerlink&quot; title=&quot;0.防止我忘记&quot;&gt;&lt;/a&gt;0.防止我忘记&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;malloc不会自动初始化内存，calloc才会自动初始化。malloc初始化需要配合memset或者构造函数。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;因此如果malloc时没有初始化内存，则可能会泄露脏数据。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-libc2-23下的offbyone&quot;&gt;&lt;a href=&quot;#1-libc2-23下的offbyone&quot; class=&quot;headerlink&quot; title=&quot;1.libc2.23下的offbyone&quot;&gt;&lt;/a&gt;1.libc2.23下的offbyone&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="overlap" scheme="http://example.com/tags/overlap/"/>
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="offbyone" scheme="http://example.com/tags/offbyone/"/>
    
  </entry>
  
  <entry>
    <title>unsortedbin attack</title>
    <link href="http://example.com/2022/02/21/unsortedbin-attack/"/>
    <id>http://example.com/2022/02/21/unsortedbin-attack/</id>
    <published>2022-02-21T13:54:19.000Z</published>
    <updated>2022-02-21T15:27:26.618Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-关于unsortedbin-attack&quot;&gt;&lt;a href=&quot;#0-关于unsortedbin-attack&quot; class=&quot;headerlink&quot; title=&quot;0.关于unsortedbin attack&quot;&gt;&lt;/a&gt;0.关于unsortedbin attack&lt;/h4&gt;&lt;p&gt;unsortedbin attack的实现前提是存在UAF。&lt;br&gt;它是低版本libc堆漏洞中第二常用的攻击手法，同时也是最简单的攻击手法。&lt;br&gt;&lt;strong&gt;它最终能够实现在任意内存处写一个非常大的数。&lt;/strong&gt;（一般是malloc_state-&amp;gt;fd，libc-2.23中即为main_arena+88）&lt;br&gt;通常，利用这种攻击手法来&lt;strong&gt;修改次数限制、上限信息、伪造堆头、配合局部写等，也通常和fastbin attack配合使用。&lt;/strong&gt;&lt;br&gt;但是在2.29以后的libc版本中增加了对这种攻击的检查机制，因此高版本无法使用这种攻击手法。&lt;/p&gt;
&lt;h4 id=&quot;1-unsortedbin-leak&quot;&gt;&lt;a href=&quot;#1-unsortedbin-leak&quot; class=&quot;headerlink&quot; title=&quot;1.unsortedbin leak&quot;&gt;&lt;/a&gt;1.unsortedbin leak&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="unsortedbin attack" scheme="http://example.com/tags/unsortedbin-attack/"/>
    
    <category term="UAF" scheme="http://example.com/tags/UAF/"/>
    
    <category term="堆漏洞" scheme="http://example.com/tags/%E5%A0%86%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week4</title>
    <link href="http://example.com/2022/02/17/HGAME2022-week4/"/>
    <id>http://example.com/2022/02/17/HGAME2022-week4/</id>
    <published>2022-02-17T07:55:05.000Z</published>
    <updated>2022-02-18T14:40:32.280Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;最后一周的摆烂（&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week3</title>
    <link href="http://example.com/2022/02/16/HGAME2022-week3/"/>
    <id>http://example.com/2022/02/16/HGAME2022-week3/</id>
    <published>2022-02-16T10:57:06.000Z</published>
    <updated>2022-02-17T07:53:22.061Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;第三周的受苦。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week2</title>
    <link href="http://example.com/2022/02/05/HGAME2022-week2/"/>
    <id>http://example.com/2022/02/05/HGAME2022-week2/</id>
    <published>2022-02-05T05:29:44.000Z</published>
    <updated>2022-02-17T06:59:53.660Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;第二周的受苦。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week1</title>
    <link href="http://example.com/2022/01/31/HGAME2022-week1/"/>
    <id>http://example.com/2022/01/31/HGAME2022-week1/</id>
    <published>2022-01-31T08:00:51.000Z</published>
    <updated>2022-02-05T05:28:13.435Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;慢人一步的WP，&lt;br&gt;被迫去做各种类型的题，&lt;br&gt;以及除了PWN其他都学到了……&lt;br&gt;（第一次写其他类型的wp）&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF babyheap_0ctf_2017</title>
    <link href="http://example.com/2022/01/18/BUUCTF-babyheap-0ctf-2017/"/>
    <id>http://example.com/2022/01/18/BUUCTF-babyheap-0ctf-2017/</id>
    <published>2022-01-18T06:18:03.000Z</published>
    <updated>2022-01-26T13:28:41.215Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-说明&quot;&gt;&lt;a href=&quot;#0-说明&quot; class=&quot;headerlink&quot; title=&quot;0.说明&quot;&gt;&lt;/a&gt;0.说明&lt;/h4&gt;&lt;p&gt;作为学习的堆题，内容涉及堆溢出漏洞、堆块重叠，fastbin attack等。&lt;br&gt;libc版本是2.23。&lt;/p&gt;
&lt;h4 id=&quot;1-题解&quot;&gt;&lt;a href=&quot;#1-题解&quot; class=&quot;headerlink&quot; title=&quot;1.题解&quot;&gt;&lt;/a&gt;1.题解&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="overlap" scheme="http://example.com/tags/overlap/"/>
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="fastbin attack" scheme="http://example.com/tags/fastbin-attack/"/>
    
  </entry>
  
  <entry>
    <title>例析基于UAF的fastbin attack及realloc调整栈</title>
    <link href="http://example.com/2021/12/22/%E4%BE%8B%E6%9E%90%E5%9F%BA%E4%BA%8EUAF%E7%9A%84fastbin-attack%E5%8F%8Arealloc%E8%B0%83%E6%95%B4%E6%A0%88/"/>
    <id>http://example.com/2021/12/22/%E4%BE%8B%E6%9E%90%E5%9F%BA%E4%BA%8EUAF%E7%9A%84fastbin-attack%E5%8F%8Arealloc%E8%B0%83%E6%95%B4%E6%A0%88/</id>
    <published>2021-12-22T03:27:44.000Z</published>
    <updated>2022-01-18T05:56:40.170Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前导知识&quot;&gt;&lt;a href=&quot;#0-前导知识&quot; class=&quot;headerlink&quot; title=&quot;0.前导知识&quot;&gt;&lt;/a&gt;0.前导知识&lt;/h4&gt;&lt;h5 id=&quot;0-1-unsortedbin泄露libc地址&quot;&gt;&lt;a href=&quot;#0-1-unsortedbin泄露libc地址&quot; class=&quot;headerlink&quot; title=&quot;0-1.unsortedbin泄露libc地址&quot;&gt;&lt;/a&gt;0-1.unsortedbin泄露libc地址&lt;/h5&gt;&lt;p&gt;通过查阅相关资料可以知道，对于libc-2.23.so而言，当unsortedbin中只有一个freed chunk时，这个freed chunk的fd和bk指针都指向libc中的一个地址（一般是&amp;lt;main_arena+88&amp;gt;），这个偏移也可以算出是0x3c4b78。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="fastbin attack" scheme="http://example.com/tags/fastbin-attack/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="UAF" scheme="http://example.com/tags/UAF/"/>
    
    <category term="malloc" scheme="http://example.com/tags/malloc/"/>
    
    <category term="realloc" scheme="http://example.com/tags/realloc/"/>
    
    <category term="one_gatget" scheme="http://example.com/tags/one-gatget/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2021 PWN 部分WP</title>
    <link href="http://example.com/2021/12/07/UNCTF2021-PWN-%E9%83%A8%E5%88%86WP/"/>
    <id>http://example.com/2021/12/07/UNCTF2021-PWN-%E9%83%A8%E5%88%86WP/</id>
    <published>2021-12-07T14:08:18.000Z</published>
    <updated>2021-12-07T14:52:09.248Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;UNCTF2021年个人赛的PWN题部分WP。&lt;/p&gt;
&lt;h4 id=&quot;1-fo&quot;&gt;&lt;a href=&quot;#1-fo&quot; class=&quot;headerlink&quot; title=&quot;1.fo&quot;&gt;&lt;/a&gt;1.fo&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
    <category term="整数溢出" scheme="http://example.com/tags/%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/"/>
    
    <category term="mprotect" scheme="http://example.com/tags/mprotect/"/>
    
    <category term="shellcode" scheme="http://example.com/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>浅谈利用堆溢出、UAF及double free实现fastbin attack</title>
    <link href="http://example.com/2021/11/29/%E6%B5%85%E8%B0%88%E5%88%A9%E7%94%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E3%80%81UAF%E5%8F%8Adouble-free%E5%AE%9E%E7%8E%B0fastbin-attack/"/>
    <id>http://example.com/2021/11/29/%E6%B5%85%E8%B0%88%E5%88%A9%E7%94%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E3%80%81UAF%E5%8F%8Adouble-free%E5%AE%9E%E7%8E%B0fastbin-attack/</id>
    <published>2021-11-29T14:56:55.000Z</published>
    <updated>2021-11-29T17:38:14.049Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-UAF&quot;&gt;&lt;a href=&quot;#0-UAF&quot; class=&quot;headerlink&quot; title=&quot;0.UAF&quot;&gt;&lt;/a&gt;0.UAF&lt;/h4&gt;&lt;h5 id=&quot;0-1-What’s-UAF&quot;&gt;&lt;a href=&quot;#0-1-What’s-UAF&quot; class=&quot;headerlink&quot; title=&quot;0-1.What’s UAF?&quot;&gt;&lt;/a&gt;0-1.What’s UAF?&lt;/h5&gt;&lt;p&gt;UAF（Use After Free），即释放后利用。通常情况下，一块内存被释放后，用户不应访问到这块被释放的内存区域。但如果用户能通过一些办法访问到这块被free的内存，则这种情况称之为UAF。&lt;br&gt;&lt;strong&gt;而我们知道，当一块chunk被free后，其user_data区会存放一些指针，如果我们能修改这些指针，那么就有可能达到劫持控制流的目的。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="fastbin attack" scheme="http://example.com/tags/fastbin-attack/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="UAF" scheme="http://example.com/tags/UAF/"/>
    
    <category term="double free" scheme="http://example.com/tags/double-free/"/>
    
  </entry>
  
  <entry>
    <title>【2021深育杯】PWN find_flag</title>
    <link href="http://example.com/2021/11/14/%E3%80%902021%E6%B7%B1%E8%82%B2%E6%9D%AF%E3%80%91PWN-find-flag/"/>
    <id>http://example.com/2021/11/14/%E3%80%902021%E6%B7%B1%E8%82%B2%E6%9D%AF%E3%80%91PWN-find-flag/</id>
    <published>2021-11-14T07:55:41.000Z</published>
    <updated>2021-11-14T09:26:00.637Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言-amp-说明&quot;&gt;&lt;a href=&quot;#0-前言-amp-说明&quot; class=&quot;headerlink&quot; title=&quot;0.前言&amp;amp;说明&quot;&gt;&lt;/a&gt;0.前言&amp;amp;说明&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;（本博客发布时间为北京时间2021年11月14日18:00后。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这道题似乎是深育杯除了签到题最简单的一题了……&lt;/p&gt;
&lt;p&gt;（暂不提供ELF文件下载。）&lt;/p&gt;
&lt;h4 id=&quot;1-WP&quot;&gt;&lt;a href=&quot;#1-WP&quot; class=&quot;headerlink&quot; title=&quot;1.WP&quot;&gt;&lt;/a&gt;1.WP&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
    <category term="格式化字符串漏洞" scheme="http://example.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="canary" scheme="http://example.com/tags/canary/"/>
    
    <category term="PIE" scheme="http://example.com/tags/PIE/"/>
    
  </entry>
  
  <entry>
    <title>Linux动态内存管理机制</title>
    <link href="http://example.com/2021/11/11/Linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/11/11/Linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</id>
    <published>2021-11-11T08:17:37.000Z</published>
    <updated>2021-11-11T13:39:40.628Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-堆内存&quot;&gt;&lt;a href=&quot;#0-堆内存&quot; class=&quot;headerlink&quot; title=&quot;0.堆内存&quot;&gt;&lt;/a&gt;0.堆内存&lt;/h4&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;pwn中的堆一般指堆内存，而非数据结构中的堆。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;堆是由一堆堆称为chunk的堆块组成的。&lt;br&gt;在64位系统中，堆块是以8字节对齐的，意味着如果申请一个长度为12字节的chunk，实际分配给我们的可控数据区域大小为16字节。&lt;br&gt;但是，在实际的管理中，一个堆块除了&lt;strong&gt;用户区域（user data）&lt;/strong&gt;外，还有&lt;strong&gt;头部字段&lt;/strong&gt;。头部字段的大小为16字节。因此在64位系统中，一个最小的chunk为&lt;strong&gt;32字节&lt;/strong&gt;（包括头部字段）。所以当我们申请一块1字节大小的chunk，实际给我们的是32字节的chunk。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="堆内存" scheme="http://example.com/tags/%E5%A0%86%E5%86%85%E5%AD%98/"/>
    
    <category term="内存管理" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界PWN新手区string</title>
    <link href="http://example.com/2021/11/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E5%8C%BAstring/"/>
    <id>http://example.com/2021/11/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E5%8C%BAstring/</id>
    <published>2021-11-04T12:02:30.000Z</published>
    <updated>2021-11-04T14:30:44.462Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;这题挺复杂的，为了设个题特地做了个有趣（？）的文字冒险游戏。&lt;br&gt;而且文字量挺大的。说实话我也是看了其他人的wp才做出来的，而且据说是pwn新手区难度很大的一题。主要是观察比较困难，而且程序代码整体阅读有一定的难度。但是它解题的逻辑倒挺简单的：就是通过格式化字符串漏洞修改变量的值使条件满足，向一段内存中写入shellcode并用函数指针强制转换类型使之可执行。&lt;/p&gt;
&lt;h4 id=&quot;1-思路&quot;&gt;&lt;a href=&quot;#1-思路&quot; class=&quot;headerlink&quot; title=&quot;1.思路&quot;&gt;&lt;/a&gt;1.思路&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="shellcode" scheme="http://example.com/tags/shellcode/"/>
    
    <category term="格式化字符串漏洞" scheme="http://example.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="函数指针" scheme="http://example.com/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
