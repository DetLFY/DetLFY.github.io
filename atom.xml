<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Detective_LFY&#39;s Blog</title>
  <icon>http://example.com/icon.png</icon>
  <subtitle>学习使人进步</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-22T08:29:37.663Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LianFeiyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>例析传统的offbyone</title>
    <link href="http://example.com/2022/02/22/%E4%BE%8B%E6%9E%90%E4%BC%A0%E7%BB%9F%E7%9A%84offbyone/"/>
    <id>http://example.com/2022/02/22/%E4%BE%8B%E6%9E%90%E4%BC%A0%E7%BB%9F%E7%9A%84offbyone/</id>
    <published>2022-02-22T06:53:06.000Z</published>
    <updated>2022-02-22T08:29:37.663Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-防止我忘记&quot;&gt;&lt;a href=&quot;#0-防止我忘记&quot; class=&quot;headerlink&quot; title=&quot;0.防止我忘记&quot;&gt;&lt;/a&gt;0.防止我忘记&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;malloc不会自动初始化内存，calloc才会自动初始化。malloc初始化需要配合memset或者构造函数。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;因此如果malloc时没有初始化内存，则可能会泄露脏数据。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-libc2-23下的offbyone&quot;&gt;&lt;a href=&quot;#1-libc2-23下的offbyone&quot; class=&quot;headerlink&quot; title=&quot;1.libc2.23下的offbyone&quot;&gt;&lt;/a&gt;1.libc2.23下的offbyone&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="overlap" scheme="http://example.com/tags/overlap/"/>
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="offbyone" scheme="http://example.com/tags/offbyone/"/>
    
  </entry>
  
  <entry>
    <title>unsortedbin attack</title>
    <link href="http://example.com/2022/02/21/unsortedbin-attack/"/>
    <id>http://example.com/2022/02/21/unsortedbin-attack/</id>
    <published>2022-02-21T13:54:19.000Z</published>
    <updated>2022-02-21T15:27:26.618Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-关于unsortedbin-attack&quot;&gt;&lt;a href=&quot;#0-关于unsortedbin-attack&quot; class=&quot;headerlink&quot; title=&quot;0.关于unsortedbin attack&quot;&gt;&lt;/a&gt;0.关于unsortedbin attack&lt;/h4&gt;&lt;p&gt;unsortedbin attack的实现前提是存在UAF。&lt;br&gt;它是低版本libc堆漏洞中第二常用的攻击手法，同时也是最简单的攻击手法。&lt;br&gt;&lt;strong&gt;它最终能够实现在任意内存处写一个非常大的数。&lt;/strong&gt;（一般是malloc_state-&amp;gt;fd，libc-2.23中即为main_arena+88）&lt;br&gt;通常，利用这种攻击手法来&lt;strong&gt;修改次数限制、上限信息、伪造堆头、配合局部写等，也通常和fastbin attack配合使用。&lt;/strong&gt;&lt;br&gt;但是在2.29以后的libc版本中增加了对这种攻击的检查机制，因此高版本无法使用这种攻击手法。&lt;/p&gt;
&lt;h4 id=&quot;1-unsortedbin-leak&quot;&gt;&lt;a href=&quot;#1-unsortedbin-leak&quot; class=&quot;headerlink&quot; title=&quot;1.unsortedbin leak&quot;&gt;&lt;/a&gt;1.unsortedbin leak&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="unsortedbin attack" scheme="http://example.com/tags/unsortedbin-attack/"/>
    
    <category term="UAF" scheme="http://example.com/tags/UAF/"/>
    
    <category term="堆漏洞" scheme="http://example.com/tags/%E5%A0%86%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week4</title>
    <link href="http://example.com/2022/02/17/HGAME2022-week4/"/>
    <id>http://example.com/2022/02/17/HGAME2022-week4/</id>
    <published>2022-02-17T07:55:05.000Z</published>
    <updated>2022-02-18T14:40:32.280Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;最后一周的摆烂（&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week3</title>
    <link href="http://example.com/2022/02/16/HGAME2022-week3/"/>
    <id>http://example.com/2022/02/16/HGAME2022-week3/</id>
    <published>2022-02-16T10:57:06.000Z</published>
    <updated>2022-02-17T07:53:22.061Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;第三周的受苦。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week2</title>
    <link href="http://example.com/2022/02/05/HGAME2022-week2/"/>
    <id>http://example.com/2022/02/05/HGAME2022-week2/</id>
    <published>2022-02-05T05:29:44.000Z</published>
    <updated>2022-02-17T06:59:53.660Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;第二周的受苦。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 week1</title>
    <link href="http://example.com/2022/01/31/HGAME2022-week1/"/>
    <id>http://example.com/2022/01/31/HGAME2022-week1/</id>
    <published>2022-01-31T08:00:51.000Z</published>
    <updated>2022-02-05T05:28:13.435Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;慢人一步的WP，&lt;br&gt;被迫去做各种类型的题，&lt;br&gt;以及除了PWN其他都学到了……&lt;br&gt;（第一次写其他类型的wp）&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HGAME" scheme="http://example.com/tags/HGAME/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF babyheap_0ctf_2017</title>
    <link href="http://example.com/2022/01/18/BUUCTF-babyheap-0ctf-2017/"/>
    <id>http://example.com/2022/01/18/BUUCTF-babyheap-0ctf-2017/</id>
    <published>2022-01-18T06:18:03.000Z</published>
    <updated>2022-01-26T13:28:41.215Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-说明&quot;&gt;&lt;a href=&quot;#0-说明&quot; class=&quot;headerlink&quot; title=&quot;0.说明&quot;&gt;&lt;/a&gt;0.说明&lt;/h4&gt;&lt;p&gt;作为学习的堆题，内容涉及堆溢出漏洞、堆块重叠，fastbin attack等。&lt;br&gt;libc版本是2.23。&lt;/p&gt;
&lt;h4 id=&quot;1-题解&quot;&gt;&lt;a href=&quot;#1-题解&quot; class=&quot;headerlink&quot; title=&quot;1.题解&quot;&gt;&lt;/a&gt;1.题解&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="overlap" scheme="http://example.com/tags/overlap/"/>
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="fastbin attack" scheme="http://example.com/tags/fastbin-attack/"/>
    
  </entry>
  
  <entry>
    <title>例析基于UAF的fastbin attack及realloc调整栈</title>
    <link href="http://example.com/2021/12/22/%E4%BE%8B%E6%9E%90%E5%9F%BA%E4%BA%8EUAF%E7%9A%84fastbin-attack%E5%8F%8Arealloc%E8%B0%83%E6%95%B4%E6%A0%88/"/>
    <id>http://example.com/2021/12/22/%E4%BE%8B%E6%9E%90%E5%9F%BA%E4%BA%8EUAF%E7%9A%84fastbin-attack%E5%8F%8Arealloc%E8%B0%83%E6%95%B4%E6%A0%88/</id>
    <published>2021-12-22T03:27:44.000Z</published>
    <updated>2022-01-18T05:56:40.170Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前导知识&quot;&gt;&lt;a href=&quot;#0-前导知识&quot; class=&quot;headerlink&quot; title=&quot;0.前导知识&quot;&gt;&lt;/a&gt;0.前导知识&lt;/h4&gt;&lt;h5 id=&quot;0-1-unsortedbin泄露libc地址&quot;&gt;&lt;a href=&quot;#0-1-unsortedbin泄露libc地址&quot; class=&quot;headerlink&quot; title=&quot;0-1.unsortedbin泄露libc地址&quot;&gt;&lt;/a&gt;0-1.unsortedbin泄露libc地址&lt;/h5&gt;&lt;p&gt;通过查阅相关资料可以知道，对于libc-2.23.so而言，当unsortedbin中只有一个freed chunk时，这个freed chunk的fd和bk指针都指向libc中的一个地址（一般是&amp;lt;main_arena+88&amp;gt;），这个偏移也可以算出是0x3c4b78。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="fastbin attack" scheme="http://example.com/tags/fastbin-attack/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="UAF" scheme="http://example.com/tags/UAF/"/>
    
    <category term="malloc" scheme="http://example.com/tags/malloc/"/>
    
    <category term="realloc" scheme="http://example.com/tags/realloc/"/>
    
    <category term="one_gatget" scheme="http://example.com/tags/one-gatget/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2021 PWN 部分WP</title>
    <link href="http://example.com/2021/12/07/UNCTF2021-PWN-%E9%83%A8%E5%88%86WP/"/>
    <id>http://example.com/2021/12/07/UNCTF2021-PWN-%E9%83%A8%E5%88%86WP/</id>
    <published>2021-12-07T14:08:18.000Z</published>
    <updated>2021-12-07T14:52:09.248Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;UNCTF2021年个人赛的PWN题部分WP。&lt;/p&gt;
&lt;h4 id=&quot;1-fo&quot;&gt;&lt;a href=&quot;#1-fo&quot; class=&quot;headerlink&quot; title=&quot;1.fo&quot;&gt;&lt;/a&gt;1.fo&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
    <category term="整数溢出" scheme="http://example.com/tags/%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/"/>
    
    <category term="mprotect" scheme="http://example.com/tags/mprotect/"/>
    
    <category term="shellcode" scheme="http://example.com/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>浅谈利用堆溢出、UAF及double free实现fastbin attack</title>
    <link href="http://example.com/2021/11/29/%E6%B5%85%E8%B0%88%E5%88%A9%E7%94%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E3%80%81UAF%E5%8F%8Adouble-free%E5%AE%9E%E7%8E%B0fastbin-attack/"/>
    <id>http://example.com/2021/11/29/%E6%B5%85%E8%B0%88%E5%88%A9%E7%94%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E3%80%81UAF%E5%8F%8Adouble-free%E5%AE%9E%E7%8E%B0fastbin-attack/</id>
    <published>2021-11-29T14:56:55.000Z</published>
    <updated>2021-11-29T17:38:14.049Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-UAF&quot;&gt;&lt;a href=&quot;#0-UAF&quot; class=&quot;headerlink&quot; title=&quot;0.UAF&quot;&gt;&lt;/a&gt;0.UAF&lt;/h4&gt;&lt;h5 id=&quot;0-1-What’s-UAF&quot;&gt;&lt;a href=&quot;#0-1-What’s-UAF&quot; class=&quot;headerlink&quot; title=&quot;0-1.What’s UAF?&quot;&gt;&lt;/a&gt;0-1.What’s UAF?&lt;/h5&gt;&lt;p&gt;UAF（Use After Free），即释放后利用。通常情况下，一块内存被释放后，用户不应访问到这块被释放的内存区域。但如果用户能通过一些办法访问到这块被free的内存，则这种情况称之为UAF。&lt;br&gt;&lt;strong&gt;而我们知道，当一块chunk被free后，其user_data区会存放一些指针，如果我们能修改这些指针，那么就有可能达到劫持控制流的目的。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="堆溢出" scheme="http://example.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
    <category term="fastbin attack" scheme="http://example.com/tags/fastbin-attack/"/>
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="UAF" scheme="http://example.com/tags/UAF/"/>
    
    <category term="double free" scheme="http://example.com/tags/double-free/"/>
    
  </entry>
  
  <entry>
    <title>【2021深育杯】PWN find_flag</title>
    <link href="http://example.com/2021/11/14/%E3%80%902021%E6%B7%B1%E8%82%B2%E6%9D%AF%E3%80%91PWN-find-flag/"/>
    <id>http://example.com/2021/11/14/%E3%80%902021%E6%B7%B1%E8%82%B2%E6%9D%AF%E3%80%91PWN-find-flag/</id>
    <published>2021-11-14T07:55:41.000Z</published>
    <updated>2021-11-14T09:26:00.637Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言-amp-说明&quot;&gt;&lt;a href=&quot;#0-前言-amp-说明&quot; class=&quot;headerlink&quot; title=&quot;0.前言&amp;amp;说明&quot;&gt;&lt;/a&gt;0.前言&amp;amp;说明&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;（本博客发布时间为北京时间2021年11月14日18:00后。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这道题似乎是深育杯除了签到题最简单的一题了……&lt;/p&gt;
&lt;p&gt;（暂不提供ELF文件下载。）&lt;/p&gt;
&lt;h4 id=&quot;1-WP&quot;&gt;&lt;a href=&quot;#1-WP&quot; class=&quot;headerlink&quot; title=&quot;1.WP&quot;&gt;&lt;/a&gt;1.WP&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
    <category term="格式化字符串漏洞" scheme="http://example.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="canary" scheme="http://example.com/tags/canary/"/>
    
    <category term="PIE" scheme="http://example.com/tags/PIE/"/>
    
  </entry>
  
  <entry>
    <title>Linux动态内存管理机制</title>
    <link href="http://example.com/2021/11/11/Linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/11/11/Linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</id>
    <published>2021-11-11T08:17:37.000Z</published>
    <updated>2021-11-11T13:39:40.628Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-堆内存&quot;&gt;&lt;a href=&quot;#0-堆内存&quot; class=&quot;headerlink&quot; title=&quot;0.堆内存&quot;&gt;&lt;/a&gt;0.堆内存&lt;/h4&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;pwn中的堆一般指堆内存，而非数据结构中的堆。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;堆是由一堆堆称为chunk的堆块组成的。&lt;br&gt;在64位系统中，堆块是以8字节对齐的，意味着如果申请一个长度为12字节的chunk，实际分配给我们的可控数据区域大小为16字节。&lt;br&gt;但是，在实际的管理中，一个堆块除了&lt;strong&gt;用户区域（user data）&lt;/strong&gt;外，还有&lt;strong&gt;头部字段&lt;/strong&gt;。头部字段的大小为16字节。因此在64位系统中，一个最小的chunk为&lt;strong&gt;32字节&lt;/strong&gt;（包括头部字段）。所以当我们申请一块1字节大小的chunk，实际给我们的是32字节的chunk。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="堆内存" scheme="http://example.com/tags/%E5%A0%86%E5%86%85%E5%AD%98/"/>
    
    <category term="内存管理" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界PWN新手区string</title>
    <link href="http://example.com/2021/11/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E5%8C%BAstring/"/>
    <id>http://example.com/2021/11/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E5%8C%BAstring/</id>
    <published>2021-11-04T12:02:30.000Z</published>
    <updated>2021-11-04T14:30:44.462Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;这题挺复杂的，为了设个题特地做了个有趣（？）的文字冒险游戏。&lt;br&gt;而且文字量挺大的。说实话我也是看了其他人的wp才做出来的，而且据说是pwn新手区难度很大的一题。主要是观察比较困难，而且程序代码整体阅读有一定的难度。但是它解题的逻辑倒挺简单的：就是通过格式化字符串漏洞修改变量的值使条件满足，向一段内存中写入shellcode并用函数指针强制转换类型使之可执行。&lt;/p&gt;
&lt;h4 id=&quot;1-思路&quot;&gt;&lt;a href=&quot;#1-思路&quot; class=&quot;headerlink&quot; title=&quot;1.思路&quot;&gt;&lt;/a&gt;1.思路&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="shellcode" scheme="http://example.com/tags/shellcode/"/>
    
    <category term="格式化字符串漏洞" scheme="http://example.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="函数指针" scheme="http://example.com/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>浅谈利用格式化字符串漏洞泄露canary</title>
    <link href="http://example.com/2021/10/31/%E6%B5%85%E8%B0%88%E5%88%A9%E7%94%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E6%B3%84%E9%9C%B2canary/"/>
    <id>http://example.com/2021/10/31/%E6%B5%85%E8%B0%88%E5%88%A9%E7%94%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E6%B3%84%E9%9C%B2canary/</id>
    <published>2021-10-31T15:26:30.000Z</published>
    <updated>2021-11-01T12:30:02.817Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-格式化字符串漏洞&quot;&gt;&lt;a href=&quot;#0-格式化字符串漏洞&quot; class=&quot;headerlink&quot; title=&quot;0.格式化字符串漏洞&quot;&gt;&lt;/a&gt;0.格式化字符串漏洞&lt;/h4&gt;&lt;h5 id=&quot;0-1-起因&quot;&gt;&lt;a href=&quot;#0-1-起因&quot; class=&quot;headerlink&quot; title=&quot;0-1.起因&quot;&gt;&lt;/a&gt;0-1.起因&lt;/h5&gt;&lt;p&gt;我们知道，一般情况下，在C语言中格式化输出函数printf()的用法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d%f&amp;quot;&lt;/span&gt;,a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d%f%c&amp;quot;&lt;/span&gt;,a,b,c);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="格式化字符串漏洞" scheme="http://example.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="canary" scheme="http://example.com/tags/canary/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF中收录的【2021 鹤城杯】babyof题解</title>
    <link href="http://example.com/2021/10/28/NSSCTF%E4%B8%AD%E6%94%B6%E5%BD%95%E7%9A%84%E3%80%902021-%E9%B9%A4%E5%9F%8E%E6%9D%AF%E3%80%91babyof%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/10/28/NSSCTF%E4%B8%AD%E6%94%B6%E5%BD%95%E7%9A%84%E3%80%902021-%E9%B9%A4%E5%9F%8E%E6%9D%AF%E3%80%91babyof%E9%A2%98%E8%A7%A3/</id>
    <published>2021-10-28T08:21:38.000Z</published>
    <updated>2021-10-28T09:32:05.242Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;这题是一个比较典型的栈溢出类题，整体思路不难，我查了一下好像是当时比赛的第二题。&lt;br&gt;这题在NSSCTF上做的时候有一个点比较坑（后面讲），我不清楚是当时比赛环境就是这样还是收入时环境没有完全一致。不过还是解决了就是。&lt;br&gt;写这题的wp的原因有几个：&lt;br&gt;&lt;em&gt;一是我认为这题解法比较经典，能起到一个复习的作用；&lt;/em&gt;&lt;br&gt;&lt;em&gt;二是这题会涉及一些我之前博客中忘了写的东西，相当于做一个补充；&lt;/em&gt;&lt;br&gt;&lt;em&gt;三是解决那个小问题时用到了LibcSearcher，我个人觉得这是个不错且简单好用的Python库，一并说了。&lt;/em&gt;&lt;br&gt;这道题的exp优化参考了一些wp，但主体逻辑还是我自己写的。&lt;/p&gt;
&lt;h4 id=&quot;1-题解过程&quot;&gt;&lt;a href=&quot;#1-题解过程&quot; class=&quot;headerlink&quot; title=&quot;1.题解过程&quot;&gt;&lt;/a&gt;1.题解过程&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="真题" scheme="http://example.com/tags/%E7%9C%9F%E9%A2%98/"/>
    
    <category term="libc" scheme="http://example.com/tags/libc/"/>
    
  </entry>
  
  <entry>
    <title>栈溢出类题的一般方法</title>
    <link href="http://example.com/2021/10/26/%E6%A0%88%E6%BA%A2%E5%87%BA%E7%B1%BB%E9%A2%98%E7%9A%84%E4%B8%80%E8%88%AC%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/10/26/%E6%A0%88%E6%BA%A2%E5%87%BA%E7%B1%BB%E9%A2%98%E7%9A%84%E4%B8%80%E8%88%AC%E6%96%B9%E6%B3%95/</id>
    <published>2021-10-26T15:38:38.000Z</published>
    <updated>2021-10-26T17:07:53.178Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;本文讨论的是栈溢出类题目的思路及一般解法，不包含完整解题过程与高级ROP等。&lt;br&gt;这也算是这一个月来学习的一个总结与复习。&lt;br&gt;栈类题目的思想在我看来其实归根到底就是&lt;strong&gt;劫持控制流&lt;/strong&gt;。只要能把控制流劫持到我们想要的地方，目的便达成了。&lt;/p&gt;
&lt;h4 id=&quot;1-栈溢出的原理&quot;&gt;&lt;a href=&quot;#1-栈溢出的原理&quot; class=&quot;headerlink&quot; title=&quot;1.栈溢出的原理&quot;&gt;&lt;/a&gt;1.栈溢出的原理&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>浅谈libc地址泄露</title>
    <link href="http://example.com/2021/10/22/%E6%B5%85%E8%B0%88libc%E5%9C%B0%E5%9D%80%E6%B3%84%E9%9C%B2/"/>
    <id>http://example.com/2021/10/22/%E6%B5%85%E8%B0%88libc%E5%9C%B0%E5%9D%80%E6%B3%84%E9%9C%B2/</id>
    <published>2021-10-22T14:37:41.000Z</published>
    <updated>2021-10-22T16:40:04.271Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;这个例题似乎是没法完成最终的getshell的，因为缓冲区离got表太近了，会出问题。&lt;/p&gt;
&lt;h4 id=&quot;1-思路&quot;&gt;&lt;a href=&quot;#1-思路&quot; class=&quot;headerlink&quot; title=&quot;1.思路&quot;&gt;&lt;/a&gt;1.思路&lt;/h4&gt;&lt;p&gt;当程序开了PIE或者ASLR保护后，函数的地址会被&lt;strong&gt;随机化&lt;/strong&gt;，这时如果要返回到某个函数的话就需要泄露地址。&lt;br&gt;以开了ASLR的为例，此时系统函数的地址是随机的，但是函数在同一libc中的&lt;strong&gt;偏移量是确定的&lt;/strong&gt;。而我们知道，一个系统函数，如puts函数，在程序中被调用过后，其地址就会存在got表中，此时可以通过泄露其地址，再通过偏移即可泄露libc的基地址。此时如果要调用system或execv函数，则再用libc基地址加上对应的偏移即可。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="基地址泄露" scheme="http://example.com/tags/%E5%9F%BA%E5%9C%B0%E5%9D%80%E6%B3%84%E9%9C%B2/"/>
    
    <category term="ROP" scheme="http://example.com/tags/ROP/"/>
    
  </entry>
  
  <entry>
    <title>关于“鲲鹏杯”CTF中pwn_1一些问题的探讨</title>
    <link href="http://example.com/2021/10/20/%E5%85%B3%E4%BA%8E%E2%80%9C%E9%B2%B2%E9%B9%8F%E6%9D%AF%E2%80%9DCTF%E4%B8%ADpwn-1%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>http://example.com/2021/10/20/%E5%85%B3%E4%BA%8E%E2%80%9C%E9%B2%B2%E9%B9%8F%E6%9D%AF%E2%80%9DCTF%E4%B8%ADpwn-1%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A2%E8%AE%A8/</id>
    <published>2021-10-20T09:11:08.000Z</published>
    <updated>2021-10-20T15:40:02.895Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;&lt;em&gt;题目：&lt;a href=&quot;pwn_1&quot;&gt;点击下载ELF文件&lt;/a&gt;&lt;/em&gt;&lt;br&gt;&lt;em&gt;保护：未开任何保护&lt;/em&gt;&lt;br&gt;&lt;em&gt;其他：32位ELF，编译环境是Uubuntu14&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;说实话，这道题对pwn新人不算特别友好，主要难点有两个：一是由于汇编码中调用了call eax导致无法直接查看其伪C代码（这个在当时比赛中确实难住了我，因为以我现在的水平直接审计汇编代码属实头疼，但赛后我找到了解决的方法——很简单，因为错误指发生在call eax，那么把这行代码&lt;strong&gt;去掉或者替换&lt;/strong&gt;就行了），解决后查看伪C代码逻辑就简单了；二是这一题虽然是栈的题目，但不涉及溢出，但只要看懂了伪C代码不难想到使用shellcode，但是根据题目我们最多只能输入&lt;strong&gt;19字节&lt;/strong&gt;，而pwntools自带的shellcode远超这个字节数。所以需要准备小于19字节的shellcode。（&lt;strong&gt;因此我认为新人包括我在内要去积累一些较短的shellcode以备不时之需。&lt;/strong&gt;）&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="shellcode" scheme="http://example.com/tags/shellcode/"/>
    
    <category term="题目" scheme="http://example.com/tags/%E9%A2%98%E7%9B%AE/"/>
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="问题探讨" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E6%8E%A2%E8%AE%A8/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Kali" scheme="http://example.com/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>浅谈简单的栈转移</title>
    <link href="http://example.com/2021/10/11/%E6%B5%85%E8%B0%88%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88%E8%BD%AC%E7%A7%BB/"/>
    <id>http://example.com/2021/10/11/%E6%B5%85%E8%B0%88%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88%E8%BD%AC%E7%A7%BB/</id>
    <published>2021-10-10T16:18:38.000Z</published>
    <updated>2021-10-12T16:44:12.152Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言-amp-回顾&quot;&gt;&lt;a href=&quot;#0-前言-amp-回顾&quot; class=&quot;headerlink&quot; title=&quot;0.前言&amp;amp;回顾&quot;&gt;&lt;/a&gt;0.前言&amp;amp;回顾&lt;/h4&gt;&lt;p&gt;简单的栈转移，但是我不清楚为什么给的system我用不了……&lt;del&gt;（可能只是因为我菜）&lt;/del&gt;&lt;em&gt;（据学长说是因为system函数执行时有栈方面的对齐要求，我简单了解了一下似乎是有某字节倍数的要求才能正常调用，具体的我目前也不是很了解，以后补充。）&lt;/em&gt;，所以我用的还是execv。此题和之前ret2csu的有些类似，只是需要进行栈转移。&lt;/p&gt;
&lt;p&gt;我们知道，leave的实质是&lt;strong&gt;mov rsp,rbp;pop rbp&lt;/strong&gt;。而ret的实质是&lt;strong&gt;pop rip&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-栈转移的原因及方法&quot;&gt;&lt;a href=&quot;#1-栈转移的原因及方法&quot; class=&quot;headerlink&quot; title=&quot;1.栈转移的原因及方法&quot;&gt;&lt;/a&gt;1.栈转移的原因及方法&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="ROP" scheme="http://example.com/tags/ROP/"/>
    
    <category term="解题思路" scheme="http://example.com/tags/%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    
    <category term="栈转移" scheme="http://example.com/tags/%E6%A0%88%E8%BD%AC%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈ret2csu</title>
    <link href="http://example.com/2021/10/09/%E6%B5%85%E8%B0%88ret2csu/"/>
    <id>http://example.com/2021/10/09/%E6%B5%85%E8%B0%88ret2csu/</id>
    <published>2021-10-09T06:09:54.000Z</published>
    <updated>2021-10-09T07:18:26.252Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h4&gt;&lt;p&gt;有一说一，这个rop有一些点困扰了我很久，下面予以说明。&lt;/p&gt;
&lt;h4 id=&quot;1-总体思路&quot;&gt;&lt;a href=&quot;#1-总体思路&quot; class=&quot;headerlink&quot; title=&quot;1.总体思路&quot;&gt;&lt;/a&gt;1.总体思路&lt;/h4&gt;&lt;p&gt;ret2csu一般是应对程序中存在明显的&lt;strong&gt;栈溢出漏洞&lt;/strong&gt;，但在程序中找不到system()函数，但可看到其存在read()、write()、和 &lt;strong&gt;__libc_csu_init()&lt;/strong&gt; 函数的情况。&lt;br&gt;利用程序中的一些gadget来实现获取shell。&lt;br&gt;rop链的构造一般为：&lt;strong&gt;pop n ret+n个寄存器的值+mov call&lt;/strong&gt;。&lt;em&gt;（这边的call要注意，待会讲）&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-例子&quot;&gt;&lt;a href=&quot;#2-例子&quot; class=&quot;headerlink&quot; title=&quot;2.例子&quot;&gt;&lt;/a&gt;2.例子&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="栈溢出" scheme="http://example.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="ROP" scheme="http://example.com/tags/ROP/"/>
    
    <category term="解题思路" scheme="http://example.com/tags/%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
</feed>
